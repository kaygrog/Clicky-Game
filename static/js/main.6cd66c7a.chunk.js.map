{"version":3,"sources":["components/Character.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Character","props","className","onClick","handleClick","id","alt","name","src","process","image","Game","state","characters","clickedCharacters","score","topScore","shuffledArray","shuffle","setState","includes","console","log","newScore","clickedArray","push","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","character","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ynCAUeA,EARG,SAACC,GACjB,OACE,0BAAMC,UAAU,YAAYC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,MACjE,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKC,eAAyBR,EAAMS,UCwHjDC,G,kNAvHbC,MAAQ,CACNC,aACAC,kBAAmB,GACnBC,MAAO,EACPC,SAAU,G,EAyBZZ,YAAc,SAACC,GAEb,IAAIY,EAAgB,EAAKC,QAAQ,EAAKN,MAAMC,YAM5C,GAHA,EAAKM,SAAS,CAAEN,WAAYI,IAGxB,EAAKL,MAAME,kBAAkBM,SAASf,GAAK,CAE7CgB,QAAQC,IAAI,oBAGZ,IAAIN,EAAW,EAAKJ,MAAMI,SAGtB,EAAKJ,MAAMG,MAAQC,IAErBA,EAAW,EAAKJ,MAAMG,OAIxB,EAAKI,SAAS,CACZL,kBAAmB,GACnBE,WACAD,MAAO,QAIJ,CAELM,QAAQC,IAAI,kBAGZ,IAAIC,EAAW,EAAKX,MAAMG,MAC1BQ,EAAWA,GAAY,EACvB,EAAKJ,SAAS,CAAEJ,MAAOQ,IAGvB,IAAIC,EAAe,EAAKZ,MAAME,kBAC9BU,EAAaC,KAAKpB,GAClB,EAAKc,SAAS,CAAEL,kBAAmBU,M,sDA7D/BE,GAMN,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,I,+BAgDC,IAAD,OACP,OACE,6BACE,6BACE,wCACUQ,KAAKtB,MAAMG,MADrB,iBAC0CmB,KAAKtB,MAAMI,WAOvD,yBAAKd,UAAU,QACZgC,KAAKtB,MAAMC,WAAWsB,KAAI,SAACC,GAAD,OACzB,kBAAC,EAAD,CACE/B,GAAI+B,EAAU/B,GACdgC,IAAKD,EAAU/B,GACfE,KAAM6B,EAAU7B,KAChBG,MAAO0B,EAAU1B,MACjBN,YAAa,EAAKA,uB,GA9FbkC,cCGJC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.6cd66c7a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Character = (props) => {\r\n  return (\r\n    <span className=\"character\" onClick={() => props.handleClick(props.id)}>\r\n      <img alt={props.name} src={process.env.PUBLIC_URL + props.image} />\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","import React, { Component } from \"react\";\r\nimport characters from \"../characters.json\";\r\nimport Character from \"./Character\";\r\nimport \"./style.css\";\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    characters,\r\n    clickedCharacters: [],\r\n    score: 0,\r\n    topScore: 0,\r\n  };\r\n\r\n  // Use the Fisher-Yates (aka Knuth) Shuffle to randomize an array\r\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\n  shuffle(array) {\r\n    var currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  handleClick = (id) => {\r\n    // Shuffle and store the array of characters that's currently in state\r\n    var shuffledArray = this.shuffle(this.state.characters);\r\n\r\n    // Set the array in state to the shuffled array\r\n    this.setState({ characters: shuffledArray });\r\n\r\n    // If the clicked character has already been clicked...\r\n    if (this.state.clickedCharacters.includes(id)) {\r\n      // TODO: Display this console log to the user on the page\r\n      console.log(\"Incorrect guess!\");\r\n\r\n      // Grab the current top score from state\r\n      var topScore = this.state.topScore;\r\n\r\n      // If the current score is greater than the current top score...\r\n      if (this.state.score > topScore) {\r\n        // Set the current score as the top score\r\n        topScore = this.state.score;\r\n      }\r\n\r\n      // Empty clickedCharacters array, set top score as final score, set current score to 0\r\n      this.setState({\r\n        clickedCharacters: [],\r\n        topScore,\r\n        score: 0,\r\n      });\r\n\r\n      // If the clicked character was never clicked...\r\n    } else {\r\n      // TODO: Display this console log to the user on the page\r\n      console.log(\"Correct guess!\");\r\n\r\n      // Increment the score\r\n      var newScore = this.state.score;\r\n      newScore = newScore += 1;\r\n      this.setState({ score: newScore });\r\n\r\n      // Add the character to the clickedCharacters array\r\n      var clickedArray = this.state.clickedCharacters;\r\n      clickedArray.push(id);\r\n      this.setState({ clickedCharacters: clickedArray });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <span>\r\n            Score: {this.state.score} | Top Score: {this.state.topScore}\r\n          </span>\r\n        </div>\r\n\r\n        {/* Create a new array of Character components using data from characters.json */}\r\n        {/* Display the array on the page using JSX */}\r\n        {/* Execute the handleClick function when Character component is clicked */}\r\n        <div className=\"grid\">\r\n          {this.state.characters.map((character) => (\r\n            <Character\r\n              id={character.id}\r\n              key={character.id}\r\n              name={character.name}\r\n              image={character.image}\r\n              handleClick={this.handleClick}\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        {/* TODO:\r\n              - (DONE) Randomize on click\r\n                  - Create array that holds all the characters\r\n                  - When any character is clicked, randomize array and place back on the page\r\n              \r\n              - (DONE) Scoring\r\n                  - Create an array to store clicked characters\r\n                  - Each time a character is clicked, check if character is already in the clicked characters array:\r\n                      - IF YES:\r\n                          - Tell user they guessed incorrectly\r\n                          - If score > top score, store score as top score \r\n                          - Set score to 0\r\n                          - Clear clicked characters array\r\n                      - IF NO:\r\n                          - Increment score\r\n                          - Add character to clicked characters array */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}